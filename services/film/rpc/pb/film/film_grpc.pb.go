// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: services/film/rpc/pb/film/film.proto

package film

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilmClient is the client API for Film service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilmClient interface {
	//影片列表
	List(ctx context.Context, in *FilmListRequest, opts ...grpc.CallOption) (*FilmListResponse, error)
	//影片详情
	Detail(ctx context.Context, in *FilmDatailRequest, opts ...grpc.CallOption) (*FilmDetailResponse, error)
}

type filmClient struct {
	cc grpc.ClientConnInterface
}

func NewFilmClient(cc grpc.ClientConnInterface) FilmClient {
	return &filmClient{cc}
}

func (c *filmClient) List(ctx context.Context, in *FilmListRequest, opts ...grpc.CallOption) (*FilmListResponse, error) {
	out := new(FilmListResponse)
	err := c.cc.Invoke(ctx, "/film.Film/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmClient) Detail(ctx context.Context, in *FilmDatailRequest, opts ...grpc.CallOption) (*FilmDetailResponse, error) {
	out := new(FilmDetailResponse)
	err := c.cc.Invoke(ctx, "/film.Film/Detail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilmServer is the server API for Film service.
// All implementations must embed UnimplementedFilmServer
// for forward compatibility
type FilmServer interface {
	//影片列表
	List(context.Context, *FilmListRequest) (*FilmListResponse, error)
	//影片详情
	Detail(context.Context, *FilmDatailRequest) (*FilmDetailResponse, error)
	mustEmbedUnimplementedFilmServer()
}

// UnimplementedFilmServer must be embedded to have forward compatible implementations.
type UnimplementedFilmServer struct {
}

func (UnimplementedFilmServer) List(context.Context, *FilmListRequest) (*FilmListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedFilmServer) Detail(context.Context, *FilmDatailRequest) (*FilmDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}
func (UnimplementedFilmServer) mustEmbedUnimplementedFilmServer() {}

// UnsafeFilmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilmServer will
// result in compilation errors.
type UnsafeFilmServer interface {
	mustEmbedUnimplementedFilmServer()
}

func RegisterFilmServer(s grpc.ServiceRegistrar, srv FilmServer) {
	s.RegisterService(&Film_ServiceDesc, srv)
}

func _Film_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/film.Film/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).List(ctx, req.(*FilmListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Film_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilmDatailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/film.Film/Detail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmServer).Detail(ctx, req.(*FilmDatailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Film_ServiceDesc is the grpc.ServiceDesc for Film service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Film_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "film.Film",
	HandlerType: (*FilmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Film_List_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _Film_Detail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/film/rpc/pb/film/film.proto",
}
