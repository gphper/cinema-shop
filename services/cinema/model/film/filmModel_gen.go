// Code generated by goctl. DO NOT EDIT!

package film

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	filmFieldNames          = builder.RawFieldNames(&Film{})
	filmRows                = strings.Join(filmFieldNames, ",")
	filmRowsExpectAutoSet   = strings.Join(stringx.Remove(filmFieldNames, "`film_id`", "`create_time`", "`update_time`"), ",")
	filmRowsWithPlaceHolder = strings.Join(stringx.Remove(filmFieldNames, "`film_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheFilmFilmIdPrefix = "cache:film:filmId:"
)

type (
	filmModel interface {
		Insert(ctx context.Context, data *Film) (sql.Result, error)
		FindOne(ctx context.Context, filmId int64) (*Film, error)
		Update(ctx context.Context, data *Film) error
		Delete(ctx context.Context, filmId int64) error
	}

	defaultFilmModel struct {
		sqlc.CachedConn
		table string
	}

	Film struct {
		FilmId   int64  `db:"film_id"`   // 影片ID
		FilmName string `db:"film_name"` // 影片名称
		FilmDesc string `db:"film_desc"` // 影片描述
		Duration int64  `db:"duration"`  // 影片时长
		CoverPic string `db:"cover_pic"` // 影片封面图
		Tp       int64  `db:"type"`      // 影片类型 1:2d 2:3d
		Cate     int64  `db:"cate"`      // 影片分类 1古装剧 2动作片 2历史剧
	}
)

func newFilmModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultFilmModel {
	return &defaultFilmModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`film`",
	}
}

func (m *defaultFilmModel) Insert(ctx context.Context, data *Film) (sql.Result, error) {
	filmFilmIdKey := fmt.Sprintf("%s%v", cacheFilmFilmIdPrefix, data.FilmId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, filmRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FilmName, data.FilmDesc, data.Duration, data.CoverPic, data.Tp, data.Cate)
	}, filmFilmIdKey)
	return ret, err
}

func (m *defaultFilmModel) FindOne(ctx context.Context, filmId int64) (*Film, error) {
	filmFilmIdKey := fmt.Sprintf("%s%v", cacheFilmFilmIdPrefix, filmId)
	var resp Film
	err := m.QueryRowCtx(ctx, &resp, filmFilmIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `film_id` = ? limit 1", filmRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, filmId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFilmModel) Update(ctx context.Context, data *Film) error {
	filmFilmIdKey := fmt.Sprintf("%s%v", cacheFilmFilmIdPrefix, data.FilmId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `film_id` = ?", m.table, filmRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.FilmName, data.FilmDesc, data.Duration, data.CoverPic, data.Tp, data.Cate, data.FilmId)
	}, filmFilmIdKey)
	return err
}

func (m *defaultFilmModel) Delete(ctx context.Context, filmId int64) error {
	filmFilmIdKey := fmt.Sprintf("%s%v", cacheFilmFilmIdPrefix, filmId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `film_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, filmId)
	}, filmFilmIdKey)
	return err
}

func (m *defaultFilmModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheFilmFilmIdPrefix, primary)
}

func (m *defaultFilmModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `film_id` = ? limit 1", filmRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFilmModel) tableName() string {
	return m.table
}
