// Code generated by goctl. DO NOT EDIT!

package cinema

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cinemaFieldNames          = builder.RawFieldNames(&Cinema{})
	cinemaRows                = strings.Join(cinemaFieldNames, ",")
	cinemaRowsExpectAutoSet   = strings.Join(stringx.Remove(cinemaFieldNames, "`cinema_id`", "`create_time`", "`update_time`"), ",")
	cinemaRowsWithPlaceHolder = strings.Join(stringx.Remove(cinemaFieldNames, "`cinema_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheCinemaCinemaIdPrefix = "cache:cinema:cinemaId:"
)

type (
	cinemaModel interface {
		Insert(ctx context.Context, data *Cinema) (sql.Result, error)
		FindOne(ctx context.Context, cinemaId int64) (*Cinema, error)
		Update(ctx context.Context, data *Cinema) error
		Delete(ctx context.Context, cinemaId int64) error
	}

	defaultCinemaModel struct {
		sqlc.CachedConn
		table string
	}

	Cinema struct {
		CinemaName sql.NullString `db:"cinema_name"` // 影院名称
		CinemaId   int64          `db:"cinema_id"`   // 影院ID
		Place      sql.NullString `db:"place"`       // 地点
		City       sql.NullString `db:"city"`        // 市级编号
		Area       sql.NullString `db:"area"`        // 县区编号
		Score      sql.NullInt64  `db:"score"`       // 评分
		Tags       sql.NullString `db:"tags"`        // 标签，多个使用,分割
	}
)

func newCinemaModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCinemaModel {
	return &defaultCinemaModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`cinema`",
	}
}

func (m *defaultCinemaModel) Insert(ctx context.Context, data *Cinema) (sql.Result, error) {
	cinemaCinemaIdKey := fmt.Sprintf("%s%v", cacheCinemaCinemaIdPrefix, data.CinemaId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, cinemaRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CinemaName, data.Place, data.City, data.Area, data.Score, data.Tags)
	}, cinemaCinemaIdKey)
	return ret, err
}

func (m *defaultCinemaModel) FindOne(ctx context.Context, cinemaId int64) (*Cinema, error) {
	cinemaCinemaIdKey := fmt.Sprintf("%s%v", cacheCinemaCinemaIdPrefix, cinemaId)
	var resp Cinema
	err := m.QueryRowCtx(ctx, &resp, cinemaCinemaIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `cinema_id` = ? limit 1", cinemaRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, cinemaId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCinemaModel) Update(ctx context.Context, data *Cinema) error {
	cinemaCinemaIdKey := fmt.Sprintf("%s%v", cacheCinemaCinemaIdPrefix, data.CinemaId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `cinema_id` = ?", m.table, cinemaRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CinemaName, data.Place, data.City, data.Area, data.Score, data.Tags, data.CinemaId)
	}, cinemaCinemaIdKey)
	return err
}

func (m *defaultCinemaModel) Delete(ctx context.Context, cinemaId int64) error {
	cinemaCinemaIdKey := fmt.Sprintf("%s%v", cacheCinemaCinemaIdPrefix, cinemaId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `cinema_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, cinemaId)
	}, cinemaCinemaIdKey)
	return err
}

func (m *defaultCinemaModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCinemaCinemaIdPrefix, primary)
}

func (m *defaultCinemaModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `cinema_id` = ? limit 1", cinemaRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCinemaModel) tableName() string {
	return m.table
}
