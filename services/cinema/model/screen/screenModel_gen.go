// Code generated by goctl. DO NOT EDIT!

package screen

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	screenFieldNames          = builder.RawFieldNames(&Screen{})
	screenRows                = strings.Join(screenFieldNames, ",")
	screenRowsExpectAutoSet   = strings.Join(stringx.Remove(screenFieldNames, "`screen_id`", "`create_time`", "`update_time`"), ",")
	screenRowsWithPlaceHolder = strings.Join(stringx.Remove(screenFieldNames, "`screen_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheScreenScreenIdPrefix = "cache:screen:screenId:"
)

type (
	screenModel interface {
		Insert(ctx context.Context, data *Screen) (sql.Result, error)
		FindOne(ctx context.Context, screenId int64) (*Screen, error)
		Update(ctx context.Context, data *Screen) error
		Delete(ctx context.Context, screenId int64) error
	}

	defaultScreenModel struct {
		sqlc.CachedConn
		table string
	}

	Screen struct {
		ScreenId    int64          `db:"screen_id"`    // 排片ID
		CinemaId    sql.NullInt64  `db:"cinema_id"`    // 影院ID
		FilmId      sql.NullInt64  `db:"film_id"`      // 影片ID
		TDate       sql.NullTime   `db:"t_date"`       // 排片日期
		Price       int64          `db:"price"`        // 售价(单位：分)
		StartTime   sql.NullString `db:"start_time"`   // 开场时间
		HallId      sql.NullInt64  `db:"hall_id"`      // 影厅id
		CurrentSeat sql.NullString `db:"current_seat"` // 当前座位售卖情况【0表示不存在 1待出售 2已出售】
	}
)

func newScreenModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultScreenModel {
	return &defaultScreenModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`screen`",
	}
}

func (m *defaultScreenModel) Insert(ctx context.Context, data *Screen) (sql.Result, error) {
	screenScreenIdKey := fmt.Sprintf("%s%v", cacheScreenScreenIdPrefix, data.ScreenId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, screenRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.CinemaId, data.FilmId, data.TDate, data.Price, data.StartTime, data.HallId, data.CurrentSeat)
	}, screenScreenIdKey)
	return ret, err
}

func (m *defaultScreenModel) FindOne(ctx context.Context, screenId int64) (*Screen, error) {
	screenScreenIdKey := fmt.Sprintf("%s%v", cacheScreenScreenIdPrefix, screenId)
	var resp Screen
	err := m.QueryRowCtx(ctx, &resp, screenScreenIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `screen_id` = ? limit 1", screenRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, screenId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultScreenModel) Update(ctx context.Context, data *Screen) error {
	screenScreenIdKey := fmt.Sprintf("%s%v", cacheScreenScreenIdPrefix, data.ScreenId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `screen_id` = ?", m.table, screenRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CinemaId, data.FilmId, data.TDate, data.Price, data.StartTime, data.HallId, data.CurrentSeat, data.ScreenId)
	}, screenScreenIdKey)
	return err
}

func (m *defaultScreenModel) Delete(ctx context.Context, screenId int64) error {
	screenScreenIdKey := fmt.Sprintf("%s%v", cacheScreenScreenIdPrefix, screenId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `screen_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, screenId)
	}, screenScreenIdKey)
	return err
}

func (m *defaultScreenModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheScreenScreenIdPrefix, primary)
}

func (m *defaultScreenModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `screen_id` = ? limit 1", screenRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultScreenModel) tableName() string {
	return m.table
}
