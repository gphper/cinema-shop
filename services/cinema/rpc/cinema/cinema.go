// Code generated by goctl. DO NOT EDIT!
// Source: cinema.proto

package cinema

import (
	"context"

	"cinema-shop/services/cinema/rpc/pb/cinema"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CinemaInfo               = cinema.CinemaInfo
	CinemaInfoRequest        = cinema.CinemaInfoRequest
	CinemaInfoResponse       = cinema.CinemaInfoResponse
	FilmDatailRequest        = cinema.FilmDatailRequest
	FilmDetailInfo           = cinema.FilmDetailInfo
	FilmDetailResponse       = cinema.FilmDetailResponse
	FilmListInfo             = cinema.FilmListInfo
	FilmListRequest          = cinema.FilmListRequest
	FilmListResponse         = cinema.FilmListResponse
	ScreenCinemaInfo         = cinema.ScreenCinemaInfo
	ScreenCinemaInfoRequest  = cinema.ScreenCinemaInfoRequest
	ScreenCinemaInfoResponse = cinema.ScreenCinemaInfoResponse

	Cinema interface {
		// 影片列表
		FilmList(ctx context.Context, in *FilmListRequest, opts ...grpc.CallOption) (*FilmListResponse, error)
		// 影片详情
		FilmDetail(ctx context.Context, in *FilmDatailRequest, opts ...grpc.CallOption) (*FilmDetailResponse, error)
		// 根据地理位置获取影院信息
		CinemaInfo(ctx context.Context, in *CinemaInfoRequest, opts ...grpc.CallOption) (*CinemaInfoResponse, error)
		// 根据影片和日期和影院ID获取排片信息
		ScreenCinemaInfo(ctx context.Context, in *ScreenCinemaInfoRequest, opts ...grpc.CallOption) (*ScreenCinemaInfoResponse, error)
	}

	defaultCinema struct {
		cli zrpc.Client
	}
)

func NewCinema(cli zrpc.Client) Cinema {
	return &defaultCinema{
		cli: cli,
	}
}

// 影片列表
func (m *defaultCinema) FilmList(ctx context.Context, in *FilmListRequest, opts ...grpc.CallOption) (*FilmListResponse, error) {
	client := cinema.NewCinemaClient(m.cli.Conn())
	return client.FilmList(ctx, in, opts...)
}

// 影片详情
func (m *defaultCinema) FilmDetail(ctx context.Context, in *FilmDatailRequest, opts ...grpc.CallOption) (*FilmDetailResponse, error) {
	client := cinema.NewCinemaClient(m.cli.Conn())
	return client.FilmDetail(ctx, in, opts...)
}

// 根据地理位置获取影院信息
func (m *defaultCinema) CinemaInfo(ctx context.Context, in *CinemaInfoRequest, opts ...grpc.CallOption) (*CinemaInfoResponse, error) {
	client := cinema.NewCinemaClient(m.cli.Conn())
	return client.CinemaInfo(ctx, in, opts...)
}

// 根据影片和日期和影院ID获取排片信息
func (m *defaultCinema) ScreenCinemaInfo(ctx context.Context, in *ScreenCinemaInfoRequest, opts ...grpc.CallOption) (*ScreenCinemaInfoResponse, error) {
	client := cinema.NewCinemaClient(m.cli.Conn())
	return client.ScreenCinemaInfo(ctx, in, opts...)
}
