// Code generated by goctl. DO NOT EDIT!
// Source: usercenter.proto

package usercenter

import (
	"context"

	"cinema-shop/services/usercenter/rpc/pb/usercenter"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetAccessTokenRequest  = usercenter.GetAccessTokenRequest
	GetAccessTokenResponse = usercenter.GetAccessTokenResponse
	GetUserByIDRequest     = usercenter.GetUserByIDRequest
	GetUserByIdResponse    = usercenter.GetUserByIdResponse
	RegisterRequest        = usercenter.RegisterRequest
	RegisterResponse       = usercenter.RegisterResponse
	UserInfo               = usercenter.UserInfo

	UserCenter interface {
		//  登录验证
		GetAccessToken(ctx context.Context, in *GetAccessTokenRequest, opts ...grpc.CallOption) (*GetAccessTokenResponse, error)
		//  注册
		RegisterUser(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		//  根据ID获取信息
		GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error)
	}

	defaultUserCenter struct {
		cli zrpc.Client
	}
)

func NewUserCenter(cli zrpc.Client) UserCenter {
	return &defaultUserCenter{
		cli: cli,
	}
}

//  登录验证
func (m *defaultUserCenter) GetAccessToken(ctx context.Context, in *GetAccessTokenRequest, opts ...grpc.CallOption) (*GetAccessTokenResponse, error) {
	client := usercenter.NewUserCenterClient(m.cli.Conn())
	return client.GetAccessToken(ctx, in, opts...)
}

//  注册
func (m *defaultUserCenter) RegisterUser(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := usercenter.NewUserCenterClient(m.cli.Conn())
	return client.RegisterUser(ctx, in, opts...)
}

//  根据ID获取信息
func (m *defaultUserCenter) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error) {
	client := usercenter.NewUserCenterClient(m.cli.Conn())
	return client.GetUserByID(ctx, in, opts...)
}
