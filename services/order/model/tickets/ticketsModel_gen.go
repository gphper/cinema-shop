// Code generated by goctl. DO NOT EDIT!

package tickets

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ticketsFieldNames          = builder.RawFieldNames(&Tickets{})
	ticketsRows                = strings.Join(ticketsFieldNames, ",")
	ticketsRowsExpectAutoSet   = strings.Join(stringx.Remove(ticketsFieldNames, "`ticket_id`", "`create_time`", "`update_time`"), ",")
	ticketsRowsWithPlaceHolder = strings.Join(stringx.Remove(ticketsFieldNames, "`ticket_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheTicketsTicketIdPrefix = "cache:tickets:ticketId:"
)

type (
	ticketsModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Tickets) (sql.Result, error)
		FindOne(ctx context.Context, ticketId int64) (*Tickets, error)
		Update(ctx context.Context, data *Tickets) error
		Delete(ctx context.Context, ticketId int64) error
	}

	defaultTicketsModel struct {
		sqlc.CachedConn
		table string
	}

	Tickets struct {
		TicketId  int64          `db:"ticket_id"`  // 门票ID
		OrderId   sql.NullInt64  `db:"order_id"`   // 订单ID
		TicketSn  sql.NullString `db:"ticket_sn"`  // 门票编号
		CreatedAt sql.NullTime   `db:"created_at"` // 创建时间
		ScreenId  sql.NullInt64  `db:"screen_id"`  // 排片ID
		Status    sql.NullInt64  `db:"status"`     // 状态【1待支付 2支付完成 3检票成功 4已退票 5自动取消 6已过期】
		CheckTime sql.NullTime   `db:"check_time"` // 检票时间
		Seat      sql.NullString `db:"seat"`       // 座位编号【1#2 1排2座】
	}
)

func newTicketsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTicketsModel {
	return &defaultTicketsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tickets`",
	}
}

func (m *defaultTicketsModel) Insert(ctx context.Context, session sqlx.Session, data *Tickets) (sql.Result, error) {
	ticketsTicketIdKey := fmt.Sprintf("%s%v", cacheTicketsTicketIdPrefix, data.TicketId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, ticketsRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.OrderId, data.TicketSn, data.CreatedAt, data.ScreenId, data.Status, data.CheckTime, data.Seat)
		}
		return conn.ExecCtx(ctx, query, data.OrderId, data.TicketSn, data.CreatedAt, data.ScreenId, data.Status, data.CheckTime, data.Seat)
	}, ticketsTicketIdKey)
	return ret, err
}

func (m *defaultTicketsModel) FindOne(ctx context.Context, ticketId int64) (*Tickets, error) {
	ticketsTicketIdKey := fmt.Sprintf("%s%v", cacheTicketsTicketIdPrefix, ticketId)
	var resp Tickets
	err := m.QueryRowCtx(ctx, &resp, ticketsTicketIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `ticket_id` = ? limit 1", ticketsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, ticketId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTicketsModel) Update(ctx context.Context, data *Tickets) error {
	ticketsTicketIdKey := fmt.Sprintf("%s%v", cacheTicketsTicketIdPrefix, data.TicketId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `ticket_id` = ?", m.table, ticketsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.OrderId, data.TicketSn, data.CreatedAt, data.ScreenId, data.Status, data.CheckTime, data.Seat, data.TicketId)
	}, ticketsTicketIdKey)
	return err
}

func (m *defaultTicketsModel) Delete(ctx context.Context, ticketId int64) error {
	ticketsTicketIdKey := fmt.Sprintf("%s%v", cacheTicketsTicketIdPrefix, ticketId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `ticket_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, ticketId)
	}, ticketsTicketIdKey)
	return err
}

func (m *defaultTicketsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTicketsTicketIdPrefix, primary)
}

func (m *defaultTicketsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `ticket_id` = ? limit 1", ticketsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTicketsModel) tableName() string {
	return m.table
}
