// Code generated by goctl. DO NOT EDIT!

package orders

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ordersFieldNames          = builder.RawFieldNames(&Orders{})
	ordersRows                = strings.Join(ordersFieldNames, ",")
	ordersRowsExpectAutoSet   = strings.Join(stringx.Remove(ordersFieldNames, "`order_id`", "`create_time`", "`update_time`"), ",")
	ordersRowsWithPlaceHolder = strings.Join(stringx.Remove(ordersFieldNames, "`order_id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheOrdersOrderIdPrefix = "cache:orders:orderId:"
)

type (
	ordersModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Orders) (sql.Result, error)
		FindOne(ctx context.Context, orderId int64) (*Orders, error)
		Update(ctx context.Context, data *Orders) error
		Delete(ctx context.Context, orderId int64) error
	}

	defaultOrdersModel struct {
		sqlc.CachedConn
		table string
	}

	Orders struct {
		OrderId   int64          `db:"order_id"`   // 订单ID
		OrderSn   sql.NullString `db:"order_sn"`   // 订单编号
		ScreenId  sql.NullInt64  `db:"screen_id"`  // 排片ID
		CreatedAt sql.NullTime   `db:"created_at"` // 创建时间
		Uid       sql.NullInt64  `db:"uid"`        // 用户ID
		UpdatedAt sql.NullTime   `db:"updated_at"` // 更新时间
		Amount    sql.NullInt64  `db:"amount"`     // 订单金额
		PayTime   sql.NullTime   `db:"pay_time"`   // 支付时间
		Status    sql.NullInt64  `db:"status"`     // 订单状态【1待支付 2支付完成 3检票成功 4已退票 5自动取消 6已过期】
		OrderKey  sql.NullString `db:"order_key"`  // 队列标识
	}
)

func newOrdersModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultOrdersModel {
	return &defaultOrdersModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`orders`",
	}
}

func (m *defaultOrdersModel) Insert(ctx context.Context, session sqlx.Session, data *Orders) (sql.Result, error) {
	ordersOrderIdKey := fmt.Sprintf("%s%v", cacheOrdersOrderIdPrefix, data.OrderId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, ordersRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.OrderSn, data.ScreenId, data.CreatedAt, data.Uid, data.UpdatedAt, data.Amount, data.PayTime, data.Status, data.OrderKey)
		}
		return conn.ExecCtx(ctx, query, data.OrderSn, data.ScreenId, data.CreatedAt, data.Uid, data.UpdatedAt, data.Amount, data.PayTime, data.Status, data.OrderKey)
	}, ordersOrderIdKey)
	return ret, err
}

func (m *defaultOrdersModel) FindOne(ctx context.Context, orderId int64) (*Orders, error) {
	ordersOrderIdKey := fmt.Sprintf("%s%v", cacheOrdersOrderIdPrefix, orderId)
	var resp Orders
	err := m.QueryRowCtx(ctx, &resp, ordersOrderIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", ordersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, orderId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrdersModel) Update(ctx context.Context, data *Orders) error {
	ordersOrderIdKey := fmt.Sprintf("%s%v", cacheOrdersOrderIdPrefix, data.OrderId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `order_id` = ?", m.table, ordersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.OrderSn, data.ScreenId, data.CreatedAt, data.Uid, data.UpdatedAt, data.Amount, data.PayTime, data.Status, data.OrderKey, data.OrderId)
	}, ordersOrderIdKey)
	return err
}

func (m *defaultOrdersModel) Delete(ctx context.Context, orderId int64) error {
	ordersOrderIdKey := fmt.Sprintf("%s%v", cacheOrdersOrderIdPrefix, orderId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `order_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, orderId)
	}, ordersOrderIdKey)
	return err
}

func (m *defaultOrdersModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheOrdersOrderIdPrefix, primary)
}

func (m *defaultOrdersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `order_id` = ? limit 1", ordersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrdersModel) tableName() string {
	return m.table
}
